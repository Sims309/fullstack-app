// src/schemas/user.schema.ts
import { z } from 'zod';

// âœ… Validation email Zod native (plus robuste que regex maison)
const emailField = z
  .string()
  .email({ message: 'Email invalide' })
  .nonempty({ message: 'Email requis' });

// âœ… Avatar peut Ãªtre vide ou une URL valide
const avatarField = z
  .string()
  .url({ message: 'URL de lâ€™avatar invalide' })
  .optional()
  .or(z.literal(''));

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// ðŸ”¹ SchÃ©ma de base
const baseRegisterSchema = z.object({
  email: emailField,

  username: z
    .string()
    .min(3, { message: "Nom d'utilisateur trop court (min 3 caractÃ¨res)" })
    .nonempty({ message: "Nom d'utilisateur requis" }),

  password: z
    .string()
    .min(6, { message: 'Mot de passe trop court (min 6 caractÃ¨res)' })
    .nonempty({ message: 'Mot de passe requis' }),

  confirmPassword: z
    .string()
    .nonempty({ message: 'Confirmation du mot de passe requise' }),

  avatar: avatarField,
});

// ðŸ”¹ SchÃ©ma d'inscription cÃ´tÃ© frontend (vÃ©rifie que les mots de passe correspondent)
export const registerSchema = baseRegisterSchema.refine(
  (data) => data.password === data.confirmPassword,
  {
    message: "Les mots de passe ne correspondent pas",
    path: ['confirmPassword'],
  }
);

// ðŸ”¹ SchÃ©ma backend (pas besoin de confirmPassword mais on garde avatar)
export const registerBackendSchema = baseRegisterSchema.omit({
  confirmPassword: true,
});

// ðŸ”¹ SchÃ©ma de connexion
export const loginSchema = z.object({
  email: emailField,

  password: z
    .string()
    .min(6, { message: 'Mot de passe trop court (min 6 caractÃ¨res)' })
    .nonempty({ message: 'Mot de passe requis' }),
});

// ðŸ”¹ Types TypeScript utiles partout
export type RegisterInput = z.infer<typeof registerSchema>;
export type RegisterBackendInput = z.infer<typeof registerBackendSchema>;
export type LoginInput = z.infer<typeof loginSchema>;
